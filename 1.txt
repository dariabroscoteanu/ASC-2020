#1. Functie ce primeste ca parametri prin stiva adresa unui vector de
# intregi si lungimea sa n (intreg) si: daca n este impar, returneaza in
# $v0 elementul de pe pozitia (n-1)/2, iar daca n este par, returneaza in
# $v0 suma elementelor aflate pe pozitiile (n-2)/2 si n/2; presupunem ca
# pozitiile sunt de la 0 la n-1 iar n>=1.
# Functia isi va accesa parametrii cu $fp iar apelurile vor respecta conventiile
# MIPS si C (privind cadrul de apel, $fp, registrii salvati de apelant si apelat,
# etc.).
#Program care apeleaza functia cu niste parametri fixati si afisaza mesajul (cu
 #"syscall") "mai mare" sau "mai mic" dupa cum valoarea returnata este >10 sau nu.
.data
    v:.align 2
	.word 11, 13, 12, 20, 24, 13
    n:	.align 2
	.word 6
    sep:.align 2
	.asciiz " "
    sir1:.align 2
        .asciiz "mai mare"
    sir2:.align 2
        .asciiz "mai mic"
.text
procedura:
    subu $sp,4
    sw $fp, 0($sp)

    addi $fp, $sp, 4

    subu $sp, 4
    sw $s0, 0($sp)

    subu $sp, 4
    sw $s1, 0($sp)

    subu $sp, 4
    sw $s2, 0($sp)

    subu $sp, 4
    sw $s3, 0($sp)

    subu $sp, 4
    sw $s4, 0($sp)

    lw $s0, 4($fp)
    lw $s1, 0($fp)

    rem $s2, $s1, 2
    beqz $s2, este_par
    sub $s1, $s1, 1
    div $s1, $s1, 2
    mul $s1, $s1, 4
    add $s2, $s0, $s1
    lw $s3, 0($s2)
    move $v0, $s3
    j restaurare
este_par:
    sub $s1, $s1, 1
    div $s2, $s1, 2
    mul $s2, $s2, 4
    add $s2, $s0, $s2
    lw $s3, 0($s2)
    sub $s1, $s1, 2
    mul $s1, $s1, 4
    add $s1, $s0, $s1
    lw $s4, 0($s1)
    add $s3, $s3, $s4

    move $v0, $s3
    
restaurare:
    lw $s4,-24($fp)
    lw $s3,-20($fp)
    lw $s2,-16($fp)
    lw $s1,-12($fp)
    lw $s0,-8($fp)
    lw $fp,-4($fp)
    addi $sp, 24
    jr $ra
    
main:
   la $t0, v
   subu $sp, 4
   sw $t0, 0($sp)

   lw $t0, n
   subu $sp, 4
   sw $t0, 0($sp)

   jal procedura

   addi $sp, 8

   move $t0, $v0

   bgt $t0, 10, afis_mare
    la $a0, sir2
   li $v0, 4
   syscall
   j exit
afis_mare:
   la $a0, sir1
   li $v0, 4
   syscall
exit:
    li $v0, 10
    syscall