#22. Functie ce primeste ca parametru prin stiva adresa unui string ce
# contine 8 caractere '0' sau '1' (si la sfarsit un caracter nul)
#si returneaza in $v0 byte-ul format din bitii 0/1 in aceeasi ordine ca si
# careterele '0'/'1' din string; de exemplu daca stringul dat ca parametru
# este "01000011", functia va returna $v0 = 01000011 binar = 67; byte-ul va
 #fi construit folosind operatii logice si de shiftare.
 #Functia isi va accesa parametrul cu $fp iar apelurile vor respecta
 #conventiile MIPS si C (privind cadrul de apel, $fp, registrii salvati de
#apelant si apelat, etc.).

# Program care aplica functia cu un parametru fixat
 #si afisaza byte-ul returnat, ca un intreg (cu "syscall").

 #Indicatie: dintr-un string s ca mai sus se poate obtine un byte b astfel:

 #b=0; for(i=0;i<8;++i) {b=b<<1; if(s[i]=='1')b=b | 0x01;}

.data
    sir:.align 2
    .asciiz "01000011"
sep:.align 2
	.asciiz " "

.text
binar:
    subu $sp, 4
    sw $fp, 0($sp)

    addi $fp, $sp, 4

    subu $sp, 4
    sw $s0, 0($sp)

    subu $sp, 4
    sw $s1, 0($sp)

    subu $sp, 4
    sw $s2, 0($sp)

    subu $sp, 4
    sw $s3, 0($sp)

    subu $sp, 4
    sw $s4, 0($sp)

    lw $s0, 0($fp) #sir
    li $s3,0
    li $s2, 1
 
    sll $s2, $s2, 7

loop:	
    beqz $s2, exit_loop
	
    lb $s1, 0($s0)

    sub $s1, $s1,  '0'	
    mul $s1, $s1, $s2 
    add $s3, $s3, $s1
    
    srl $s2, $s2, 1
    addi $s0, 1
    j loop


exit_loop:
    move $v0, $s3

    lw $s3, -20($fp)
    lw $s2, -16($fp)
    lw $s1, -12($fp)
    lw $s0, -8($fp)
    lw $fp, -4($fp)

    addi $sp, 20
    jr $ra


main:
    la $t0, sir
    subu $sp, 4
    sw $t0, 0($sp)

    jal binar

    addi $sp, 4

    move $a0, $v0
    li $v0, 1
    syscall
    li $v0, 10
    syscall

